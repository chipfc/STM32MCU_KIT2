
SoftwareW2812.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001038  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001144  08001144  00011144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001164  08001164  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08001164  08001164  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001164  08001164  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001164  08001164  00011164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001168  08001168  00011168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800116c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  2000001c  08001188  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000004c  08001188  0002004c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005951  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001475  00000000  00000000  00025996  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003a0  00000000  00000000  00026e10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000760  00000000  00000000  000271b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016e0e  00000000  00000000  00027910  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000498b  00000000  00000000  0003e71e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086416  00000000  00000000  000430a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c94bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000089c  00000000  00000000  000c953c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000175d  00000000  00000000  000c9dd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800112c 	.word	0x0800112c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	0800112c 	.word	0x0800112c

0800014c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800014c:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800014e:	2201      	movs	r2, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000150:	2400      	movs	r4, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000152:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000156:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000158:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
{
 800015c:	b091      	sub	sp, #68	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800015e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000160:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000162:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000164:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000166:	e9cd 530d 	strd	r5, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800016a:	910f      	str	r1, [sp, #60]	; 0x3c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800016c:	9408      	str	r4, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800016e:	9401      	str	r4, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000170:	9409      	str	r4, [sp, #36]	; 0x24
 8000172:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000176:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800017a:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800017e:	f000 fced 	bl	8000b5c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000182:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000184:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000188:	a801      	add	r0, sp, #4
 800018a:	4629      	mov	r1, r5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800018c:	e9cd 5402 	strd	r5, r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000190:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000192:	9201      	str	r2, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000194:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000196:	f000 fed9 	bl	8000f4c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800019a:	b011      	add	sp, #68	; 0x44
 800019c:	bd30      	pop	{r4, r5, pc}
 800019e:	bf00      	nop

080001a0 <main>:
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001a0:	2400      	movs	r4, #0
{
 80001a2:	b500      	push	{lr}
 80001a4:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 80001a6:	f000 fb45 	bl	8000834 <HAL_Init>
  SystemClock_Config();
 80001aa:	f7ff ffcf 	bl	800014c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ae:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80001b2:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001b6:	4b19      	ldr	r3, [pc, #100]	; (800021c <main+0x7c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80001b8:	2201      	movs	r2, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001ba:	6999      	ldr	r1, [r3, #24]

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80001bc:	2508      	movs	r5, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001be:	f041 0120 	orr.w	r1, r1, #32
 80001c2:	6199      	str	r1, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80001c4:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001c6:	6998      	ldr	r0, [r3, #24]
 80001c8:	f000 0020 	and.w	r0, r0, #32
 80001cc:	9001      	str	r0, [sp, #4]
 80001ce:	9801      	ldr	r0, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001d0:	6998      	ldr	r0, [r3, #24]
 80001d2:	f040 0004 	orr.w	r0, r0, #4
 80001d6:	6198      	str	r0, [r3, #24]
 80001d8:	6998      	ldr	r0, [r3, #24]
 80001da:	f000 0004 	and.w	r0, r0, #4
 80001de:	9002      	str	r0, [sp, #8]
 80001e0:	9802      	ldr	r0, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001e2:	6998      	ldr	r0, [r3, #24]
 80001e4:	4308      	orrs	r0, r1
 80001e6:	6198      	str	r0, [r3, #24]
 80001e8:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80001ea:	480d      	ldr	r0, [pc, #52]	; (8000220 <main+0x80>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001ec:	400b      	ands	r3, r1
 80001ee:	9303      	str	r3, [sp, #12]
 80001f0:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80001f2:	f000 fcaf 	bl	8000b54 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001f6:	2201      	movs	r2, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80001f8:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001fa:	a904      	add	r1, sp, #16
 80001fc:	4808      	ldr	r0, [pc, #32]	; (8000220 <main+0x80>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001fe:	e9cd 5204 	strd	r5, r2, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000202:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000204:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000206:	f000 fbab 	bl	8000960 <HAL_GPIO_Init>
  initWs2812b();
 800020a:	f000 fa6b 	bl	80006e4 <initWs2812b>
    	running_example();
 800020e:	f000 fa7d 	bl	800070c <running_example>
        HAL_Delay(1000);
 8000212:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000216:	f000 fb31 	bl	800087c <HAL_Delay>
 800021a:	e7f8      	b.n	800020e <main+0x6e>
 800021c:	40021000 	.word	0x40021000
 8000220:	40010c00 	.word	0x40010c00

08000224 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000224:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <HAL_MspInit+0x3c>)
{
 8000226:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000228:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800022a:	490e      	ldr	r1, [pc, #56]	; (8000264 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 800022c:	f042 0201 	orr.w	r2, r2, #1
 8000230:	619a      	str	r2, [r3, #24]
 8000232:	699a      	ldr	r2, [r3, #24]
 8000234:	f002 0201 	and.w	r2, r2, #1
 8000238:	9200      	str	r2, [sp, #0]
 800023a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800023c:	69da      	ldr	r2, [r3, #28]
 800023e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000242:	61da      	str	r2, [r3, #28]
 8000244:	69db      	ldr	r3, [r3, #28]
 8000246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800024a:	9301      	str	r3, [sp, #4]
 800024c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800024e:	684b      	ldr	r3, [r1, #4]
 8000250:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000254:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000258:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800025a:	b002      	add	sp, #8
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	40021000 	.word	0x40021000
 8000264:	40010000 	.word	0x40010000

08000268 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop

0800026c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800026c:	e7fe      	b.n	800026c <HardFault_Handler>
 800026e:	bf00      	nop

08000270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000270:	e7fe      	b.n	8000270 <MemManage_Handler>
 8000272:	bf00      	nop

08000274 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000274:	e7fe      	b.n	8000274 <BusFault_Handler>
 8000276:	bf00      	nop

08000278 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000278:	e7fe      	b.n	8000278 <UsageFault_Handler>
 800027a:	bf00      	nop

0800027c <SVC_Handler>:
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <DebugMon_Handler>:
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop

08000284 <PendSV_Handler>:
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop

08000288 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000288:	f000 bae6 	b.w	8000858 <HAL_IncTick>

0800028c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <WS2812B_Write>:
  // +300ns
  __asm__ volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");

}
void WS2812B_Write(WS2812B_t* ws2812b) {
  for (uint16_t i = 0; i < ws2812b->num_leds; i++) {
 8000290:	8883      	ldrh	r3, [r0, #4]
void WS2812B_Write(WS2812B_t* ws2812b) {
 8000292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  for (uint16_t i = 0; i < ws2812b->num_leds; i++) {
 8000296:	2b00      	cmp	r3, #0
 8000298:	f000 8219 	beq.w	80006ce <WS2812B_Write+0x43e>
 800029c:	2600      	movs	r6, #0
    RGB_t led = ws2812b->leds[i];
 800029e:	6805      	ldr	r5, [r0, #0]
 80002a0:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 80002a4:	192b      	adds	r3, r5, r4
 80002a6:	f815 c004 	ldrb.w	ip, [r5, r4]
 80002aa:	2108      	movs	r1, #8

    // Green
    for (uint8_t mask = 0x80; mask != 0; mask >>= 1) {
 80002ac:	2280      	movs	r2, #128	; 0x80
    RGB_t led = ws2812b->leds[i];
 80002ae:	f893 8001 	ldrb.w	r8, [r3, #1]
 80002b2:	789d      	ldrb	r5, [r3, #2]
 80002b4:	e04f      	b.n	8000356 <WS2812B_Write+0xc6>
  __asm__ volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
 80002b6:	bf00      	nop
 80002b8:	bf00      	nop
 80002ba:	bf00      	nop
 80002bc:	bf00      	nop
 80002be:	bf00      	nop
 80002c0:	bf00      	nop
 80002c2:	bf00      	nop
 80002c4:	bf00      	nop
 80002c6:	bf00      	nop
 80002c8:	bf00      	nop
 80002ca:	bf00      	nop
 80002cc:	bf00      	nop
 80002ce:	bf00      	nop
 80002d0:	bf00      	nop
 80002d2:	bf00      	nop
 80002d4:	bf00      	nop
 80002d6:	bf00      	nop
 80002d8:	bf00      	nop
 80002da:	bf00      	nop
 80002dc:	bf00      	nop
 80002de:	bf00      	nop
 80002e0:	bf00      	nop
 80002e2:	bf00      	nop
 80002e4:	bf00      	nop
 80002e6:	bf00      	nop
  __asm__ volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
 80002e8:	bf00      	nop
 80002ea:	bf00      	nop
 80002ec:	bf00      	nop
 80002ee:	bf00      	nop
 80002f0:	bf00      	nop
 80002f2:	bf00      	nop
 80002f4:	bf00      	nop
 80002f6:	bf00      	nop
 80002f8:	bf00      	nop
 80002fa:	bf00      	nop
 80002fc:	bf00      	nop
 80002fe:	bf00      	nop
 8000300:	bf00      	nop
 8000302:	bf00      	nop
 8000304:	bf00      	nop
 8000306:	bf00      	nop
 8000308:	bf00      	nop
 800030a:	bf00      	nop
 800030c:	bf00      	nop
 800030e:	bf00      	nop
 8000310:	bf00      	nop
 8000312:	bf00      	nop
 8000314:	bf00      	nop
 8000316:	bf00      	nop
 8000318:	bf00      	nop
  __asm__ volatile("nop\nnop\nnop\nnop\nnop");
 800031a:	bf00      	nop
 800031c:	bf00      	nop
 800031e:	bf00      	nop
 8000320:	bf00      	nop
 8000322:	bf00      	nop
  port->ODR &= ~(pin);//Pin LOW - 120ns
 8000324:	68dc      	ldr	r4, [r3, #12]
 8000326:	4027      	ands	r7, r4
 8000328:	60df      	str	r7, [r3, #12]
  __asm__ volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
 800032a:	bf00      	nop
 800032c:	bf00      	nop
 800032e:	bf00      	nop
 8000330:	bf00      	nop
 8000332:	bf00      	nop
 8000334:	bf00      	nop
 8000336:	bf00      	nop
 8000338:	bf00      	nop
 800033a:	bf00      	nop
 800033c:	bf00      	nop
 800033e:	bf00      	nop
 8000340:	bf00      	nop
 8000342:	bf00      	nop
 8000344:	bf00      	nop
 8000346:	bf00      	nop
 8000348:	bf00      	nop
 800034a:	bf00      	nop
 800034c:	bf00      	nop
    for (uint8_t mask = 0x80; mask != 0; mask >>= 1) {
 800034e:	3901      	subs	r1, #1
 8000350:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8000354:	d05a      	beq.n	800040c <WS2812B_Write+0x17c>
 8000356:	6883      	ldr	r3, [r0, #8]
 8000358:	8984      	ldrh	r4, [r0, #12]
  port->ODR |= pin; //Pin HIGH - 120ns
 800035a:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800035e:	43e7      	mvns	r7, r4
      if (led.g & mask) {
 8000360:	ea18 0f02 	tst.w	r8, r2
  port->ODR |= pin; //Pin HIGH - 120ns
 8000364:	ea4e 0404 	orr.w	r4, lr, r4
 8000368:	60dc      	str	r4, [r3, #12]
      if (led.g & mask) {
 800036a:	d1a4      	bne.n	80002b6 <WS2812B_Write+0x26>
	__asm__ volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
 800036c:	bf00      	nop
 800036e:	bf00      	nop
 8000370:	bf00      	nop
 8000372:	bf00      	nop
 8000374:	bf00      	nop
 8000376:	bf00      	nop
 8000378:	bf00      	nop
 800037a:	bf00      	nop
 800037c:	bf00      	nop
 800037e:	bf00      	nop
 8000380:	bf00      	nop
 8000382:	bf00      	nop
 8000384:	bf00      	nop
 8000386:	bf00      	nop
 8000388:	bf00      	nop
 800038a:	bf00      	nop
 800038c:	bf00      	nop
 800038e:	bf00      	nop
  	port->ODR &= ~(pin); //Pin LOW - 120ns
 8000390:	68dc      	ldr	r4, [r3, #12]
 8000392:	4027      	ands	r7, r4
 8000394:	60df      	str	r7, [r3, #12]
  __asm__ volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
 8000396:	bf00      	nop
 8000398:	bf00      	nop
 800039a:	bf00      	nop
 800039c:	bf00      	nop
 800039e:	bf00      	nop
 80003a0:	bf00      	nop
 80003a2:	bf00      	nop
 80003a4:	bf00      	nop
 80003a6:	bf00      	nop
 80003a8:	bf00      	nop
 80003aa:	bf00      	nop
 80003ac:	bf00      	nop
 80003ae:	bf00      	nop
 80003b0:	bf00      	nop
 80003b2:	bf00      	nop
 80003b4:	bf00      	nop
 80003b6:	bf00      	nop
 80003b8:	bf00      	nop
 80003ba:	bf00      	nop
 80003bc:	bf00      	nop
 80003be:	bf00      	nop
 80003c0:	bf00      	nop
 80003c2:	bf00      	nop
 80003c4:	bf00      	nop
 80003c6:	bf00      	nop
  __asm__ volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
 80003c8:	bf00      	nop
 80003ca:	bf00      	nop
 80003cc:	bf00      	nop
 80003ce:	bf00      	nop
 80003d0:	bf00      	nop
 80003d2:	bf00      	nop
 80003d4:	bf00      	nop
 80003d6:	bf00      	nop
 80003d8:	bf00      	nop
 80003da:	bf00      	nop
 80003dc:	bf00      	nop
 80003de:	bf00      	nop
 80003e0:	bf00      	nop
 80003e2:	bf00      	nop
 80003e4:	bf00      	nop
 80003e6:	bf00      	nop
 80003e8:	bf00      	nop
 80003ea:	bf00      	nop
 80003ec:	bf00      	nop
 80003ee:	bf00      	nop
 80003f0:	bf00      	nop
 80003f2:	bf00      	nop
 80003f4:	bf00      	nop
 80003f6:	bf00      	nop
 80003f8:	bf00      	nop
  __asm__ volatile("nop\nnop\nnop\nnop\nnop");
 80003fa:	bf00      	nop
 80003fc:	bf00      	nop
 80003fe:	bf00      	nop
 8000400:	bf00      	nop
 8000402:	bf00      	nop
    for (uint8_t mask = 0x80; mask != 0; mask >>= 1) {
 8000404:	3901      	subs	r1, #1
 8000406:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800040a:	d1a4      	bne.n	8000356 <WS2812B_Write+0xc6>
 800040c:	2108      	movs	r1, #8
        send_zero(ws2812b->port, ws2812b->pin);
      }
    }

    // Red
    for (uint8_t mask = 0x80; mask != 0; mask >>= 1) {
 800040e:	2280      	movs	r2, #128	; 0x80
 8000410:	e04f      	b.n	80004b2 <WS2812B_Write+0x222>
  __asm__ volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
 8000412:	bf00      	nop
 8000414:	bf00      	nop
 8000416:	bf00      	nop
 8000418:	bf00      	nop
 800041a:	bf00      	nop
 800041c:	bf00      	nop
 800041e:	bf00      	nop
 8000420:	bf00      	nop
 8000422:	bf00      	nop
 8000424:	bf00      	nop
 8000426:	bf00      	nop
 8000428:	bf00      	nop
 800042a:	bf00      	nop
 800042c:	bf00      	nop
 800042e:	bf00      	nop
 8000430:	bf00      	nop
 8000432:	bf00      	nop
 8000434:	bf00      	nop
 8000436:	bf00      	nop
 8000438:	bf00      	nop
 800043a:	bf00      	nop
 800043c:	bf00      	nop
 800043e:	bf00      	nop
 8000440:	bf00      	nop
 8000442:	bf00      	nop
  __asm__ volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
 8000444:	bf00      	nop
 8000446:	bf00      	nop
 8000448:	bf00      	nop
 800044a:	bf00      	nop
 800044c:	bf00      	nop
 800044e:	bf00      	nop
 8000450:	bf00      	nop
 8000452:	bf00      	nop
 8000454:	bf00      	nop
 8000456:	bf00      	nop
 8000458:	bf00      	nop
 800045a:	bf00      	nop
 800045c:	bf00      	nop
 800045e:	bf00      	nop
 8000460:	bf00      	nop
 8000462:	bf00      	nop
 8000464:	bf00      	nop
 8000466:	bf00      	nop
 8000468:	bf00      	nop
 800046a:	bf00      	nop
 800046c:	bf00      	nop
 800046e:	bf00      	nop
 8000470:	bf00      	nop
 8000472:	bf00      	nop
 8000474:	bf00      	nop
  __asm__ volatile("nop\nnop\nnop\nnop\nnop");
 8000476:	bf00      	nop
 8000478:	bf00      	nop
 800047a:	bf00      	nop
 800047c:	bf00      	nop
 800047e:	bf00      	nop
  port->ODR &= ~(pin);//Pin LOW - 120ns
 8000480:	68dc      	ldr	r4, [r3, #12]
 8000482:	4027      	ands	r7, r4
 8000484:	60df      	str	r7, [r3, #12]
  __asm__ volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
 8000486:	bf00      	nop
 8000488:	bf00      	nop
 800048a:	bf00      	nop
 800048c:	bf00      	nop
 800048e:	bf00      	nop
 8000490:	bf00      	nop
 8000492:	bf00      	nop
 8000494:	bf00      	nop
 8000496:	bf00      	nop
 8000498:	bf00      	nop
 800049a:	bf00      	nop
 800049c:	bf00      	nop
 800049e:	bf00      	nop
 80004a0:	bf00      	nop
 80004a2:	bf00      	nop
 80004a4:	bf00      	nop
 80004a6:	bf00      	nop
 80004a8:	bf00      	nop
    for (uint8_t mask = 0x80; mask != 0; mask >>= 1) {
 80004aa:	3901      	subs	r1, #1
 80004ac:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80004b0:	d05a      	beq.n	8000568 <WS2812B_Write+0x2d8>
 80004b2:	6883      	ldr	r3, [r0, #8]
 80004b4:	8984      	ldrh	r4, [r0, #12]
  port->ODR |= pin; //Pin HIGH - 120ns
 80004b6:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80004ba:	43e7      	mvns	r7, r4
      if (led.r & mask) {
 80004bc:	ea1c 0f02 	tst.w	ip, r2
  port->ODR |= pin; //Pin HIGH - 120ns
 80004c0:	ea4e 0404 	orr.w	r4, lr, r4
 80004c4:	60dc      	str	r4, [r3, #12]
      if (led.r & mask) {
 80004c6:	d1a4      	bne.n	8000412 <WS2812B_Write+0x182>
	__asm__ volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
 80004c8:	bf00      	nop
 80004ca:	bf00      	nop
 80004cc:	bf00      	nop
 80004ce:	bf00      	nop
 80004d0:	bf00      	nop
 80004d2:	bf00      	nop
 80004d4:	bf00      	nop
 80004d6:	bf00      	nop
 80004d8:	bf00      	nop
 80004da:	bf00      	nop
 80004dc:	bf00      	nop
 80004de:	bf00      	nop
 80004e0:	bf00      	nop
 80004e2:	bf00      	nop
 80004e4:	bf00      	nop
 80004e6:	bf00      	nop
 80004e8:	bf00      	nop
 80004ea:	bf00      	nop
  	port->ODR &= ~(pin); //Pin LOW - 120ns
 80004ec:	68dc      	ldr	r4, [r3, #12]
 80004ee:	4027      	ands	r7, r4
 80004f0:	60df      	str	r7, [r3, #12]
  __asm__ volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
 80004f2:	bf00      	nop
 80004f4:	bf00      	nop
 80004f6:	bf00      	nop
 80004f8:	bf00      	nop
 80004fa:	bf00      	nop
 80004fc:	bf00      	nop
 80004fe:	bf00      	nop
 8000500:	bf00      	nop
 8000502:	bf00      	nop
 8000504:	bf00      	nop
 8000506:	bf00      	nop
 8000508:	bf00      	nop
 800050a:	bf00      	nop
 800050c:	bf00      	nop
 800050e:	bf00      	nop
 8000510:	bf00      	nop
 8000512:	bf00      	nop
 8000514:	bf00      	nop
 8000516:	bf00      	nop
 8000518:	bf00      	nop
 800051a:	bf00      	nop
 800051c:	bf00      	nop
 800051e:	bf00      	nop
 8000520:	bf00      	nop
 8000522:	bf00      	nop
  __asm__ volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
 8000524:	bf00      	nop
 8000526:	bf00      	nop
 8000528:	bf00      	nop
 800052a:	bf00      	nop
 800052c:	bf00      	nop
 800052e:	bf00      	nop
 8000530:	bf00      	nop
 8000532:	bf00      	nop
 8000534:	bf00      	nop
 8000536:	bf00      	nop
 8000538:	bf00      	nop
 800053a:	bf00      	nop
 800053c:	bf00      	nop
 800053e:	bf00      	nop
 8000540:	bf00      	nop
 8000542:	bf00      	nop
 8000544:	bf00      	nop
 8000546:	bf00      	nop
 8000548:	bf00      	nop
 800054a:	bf00      	nop
 800054c:	bf00      	nop
 800054e:	bf00      	nop
 8000550:	bf00      	nop
 8000552:	bf00      	nop
 8000554:	bf00      	nop
  __asm__ volatile("nop\nnop\nnop\nnop\nnop");
 8000556:	bf00      	nop
 8000558:	bf00      	nop
 800055a:	bf00      	nop
 800055c:	bf00      	nop
 800055e:	bf00      	nop
    for (uint8_t mask = 0x80; mask != 0; mask >>= 1) {
 8000560:	3901      	subs	r1, #1
 8000562:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8000566:	d1a4      	bne.n	80004b2 <WS2812B_Write+0x222>
 8000568:	2108      	movs	r1, #8
        send_zero(ws2812b->port, ws2812b->pin);
      }
    }

    // Blue
    for (uint8_t mask = 0x80; mask != 0; mask >>= 1) {
 800056a:	2280      	movs	r2, #128	; 0x80
 800056c:	e04f      	b.n	800060e <WS2812B_Write+0x37e>
  __asm__ volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
 800056e:	bf00      	nop
 8000570:	bf00      	nop
 8000572:	bf00      	nop
 8000574:	bf00      	nop
 8000576:	bf00      	nop
 8000578:	bf00      	nop
 800057a:	bf00      	nop
 800057c:	bf00      	nop
 800057e:	bf00      	nop
 8000580:	bf00      	nop
 8000582:	bf00      	nop
 8000584:	bf00      	nop
 8000586:	bf00      	nop
 8000588:	bf00      	nop
 800058a:	bf00      	nop
 800058c:	bf00      	nop
 800058e:	bf00      	nop
 8000590:	bf00      	nop
 8000592:	bf00      	nop
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	bf00      	nop
 800059e:	bf00      	nop
  __asm__ volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	bf00      	nop
 80005aa:	bf00      	nop
 80005ac:	bf00      	nop
 80005ae:	bf00      	nop
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
 80005b4:	bf00      	nop
 80005b6:	bf00      	nop
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	bf00      	nop
 80005be:	bf00      	nop
 80005c0:	bf00      	nop
 80005c2:	bf00      	nop
 80005c4:	bf00      	nop
 80005c6:	bf00      	nop
 80005c8:	bf00      	nop
 80005ca:	bf00      	nop
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	bf00      	nop
  __asm__ volatile("nop\nnop\nnop\nnop\nnop");
 80005d2:	bf00      	nop
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	bf00      	nop
 80005da:	bf00      	nop
  port->ODR &= ~(pin);//Pin LOW - 120ns
 80005dc:	68dc      	ldr	r4, [r3, #12]
 80005de:	4027      	ands	r7, r4
 80005e0:	60df      	str	r7, [r3, #12]
  __asm__ volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
 80005e2:	bf00      	nop
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
 80005e8:	bf00      	nop
 80005ea:	bf00      	nop
 80005ec:	bf00      	nop
 80005ee:	bf00      	nop
 80005f0:	bf00      	nop
 80005f2:	bf00      	nop
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop
 80005f8:	bf00      	nop
 80005fa:	bf00      	nop
 80005fc:	bf00      	nop
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	bf00      	nop
 8000604:	bf00      	nop
    for (uint8_t mask = 0x80; mask != 0; mask >>= 1) {
 8000606:	3901      	subs	r1, #1
 8000608:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800060c:	d059      	beq.n	80006c2 <WS2812B_Write+0x432>
 800060e:	6883      	ldr	r3, [r0, #8]
 8000610:	8984      	ldrh	r4, [r0, #12]
  port->ODR |= pin; //Pin HIGH - 120ns
 8000612:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8000616:	43e7      	mvns	r7, r4
      if (led.b & mask) {
 8000618:	4215      	tst	r5, r2
  port->ODR |= pin; //Pin HIGH - 120ns
 800061a:	ea4c 0404 	orr.w	r4, ip, r4
 800061e:	60dc      	str	r4, [r3, #12]
      if (led.b & mask) {
 8000620:	d1a5      	bne.n	800056e <WS2812B_Write+0x2de>
	__asm__ volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
 8000622:	bf00      	nop
 8000624:	bf00      	nop
 8000626:	bf00      	nop
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	bf00      	nop
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	bf00      	nop
 800063a:	bf00      	nop
 800063c:	bf00      	nop
 800063e:	bf00      	nop
 8000640:	bf00      	nop
 8000642:	bf00      	nop
 8000644:	bf00      	nop
  	port->ODR &= ~(pin); //Pin LOW - 120ns
 8000646:	68dc      	ldr	r4, [r3, #12]
 8000648:	4027      	ands	r7, r4
 800064a:	60df      	str	r7, [r3, #12]
  __asm__ volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
 800064c:	bf00      	nop
 800064e:	bf00      	nop
 8000650:	bf00      	nop
 8000652:	bf00      	nop
 8000654:	bf00      	nop
 8000656:	bf00      	nop
 8000658:	bf00      	nop
 800065a:	bf00      	nop
 800065c:	bf00      	nop
 800065e:	bf00      	nop
 8000660:	bf00      	nop
 8000662:	bf00      	nop
 8000664:	bf00      	nop
 8000666:	bf00      	nop
 8000668:	bf00      	nop
 800066a:	bf00      	nop
 800066c:	bf00      	nop
 800066e:	bf00      	nop
 8000670:	bf00      	nop
 8000672:	bf00      	nop
 8000674:	bf00      	nop
 8000676:	bf00      	nop
 8000678:	bf00      	nop
 800067a:	bf00      	nop
 800067c:	bf00      	nop
  __asm__ volatile("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
 800067e:	bf00      	nop
 8000680:	bf00      	nop
 8000682:	bf00      	nop
 8000684:	bf00      	nop
 8000686:	bf00      	nop
 8000688:	bf00      	nop
 800068a:	bf00      	nop
 800068c:	bf00      	nop
 800068e:	bf00      	nop
 8000690:	bf00      	nop
 8000692:	bf00      	nop
 8000694:	bf00      	nop
 8000696:	bf00      	nop
 8000698:	bf00      	nop
 800069a:	bf00      	nop
 800069c:	bf00      	nop
 800069e:	bf00      	nop
 80006a0:	bf00      	nop
 80006a2:	bf00      	nop
 80006a4:	bf00      	nop
 80006a6:	bf00      	nop
 80006a8:	bf00      	nop
 80006aa:	bf00      	nop
 80006ac:	bf00      	nop
 80006ae:	bf00      	nop
  __asm__ volatile("nop\nnop\nnop\nnop\nnop");
 80006b0:	bf00      	nop
 80006b2:	bf00      	nop
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	bf00      	nop
    for (uint8_t mask = 0x80; mask != 0; mask >>= 1) {
 80006ba:	3901      	subs	r1, #1
 80006bc:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80006c0:	d1a5      	bne.n	800060e <WS2812B_Write+0x37e>
  for (uint16_t i = 0; i < ws2812b->num_leds; i++) {
 80006c2:	3601      	adds	r6, #1
 80006c4:	8883      	ldrh	r3, [r0, #4]
 80006c6:	b2b6      	uxth	r6, r6
 80006c8:	42b3      	cmp	r3, r6
 80006ca:	f63f ade8 	bhi.w	800029e <WS2812B_Write+0xe>
    for (uint8_t mask = 0x80; mask != 0; mask >>= 1) {
 80006ce:	f44f 7316 	mov.w	r3, #600	; 0x258
    }
  }

  // Reset code - optional, may not need this piece of code
  for (uint16_t i = 0; i < 600; i++) {
    __asm__ volatile("nop\nnop\n");
 80006d2:	bf00      	nop
 80006d4:	bf00      	nop
 80006d6:	3b01      	subs	r3, #1
 80006d8:	b29b      	uxth	r3, r3
  for (uint16_t i = 0; i < 600; i++) {
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d1f9      	bne.n	80006d2 <WS2812B_Write+0x442>
  }
}
 80006de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80006e2:	bf00      	nop

080006e4 <initWs2812b>:
{
 80006e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	leds[ledIndex].r = red;
 80006e6:	2500      	movs	r5, #0
 80006e8:	4c06      	ldr	r4, [pc, #24]	; (8000704 <initWs2812b+0x20>)
	WS2812B_Write(&ws2812b);
 80006ea:	4f07      	ldr	r7, [pc, #28]	; (8000708 <initWs2812b+0x24>)
 80006ec:	f104 060c 	add.w	r6, r4, #12
	leds[ledIndex].r = red;
 80006f0:	7025      	strb	r5, [r4, #0]
	leds[ledIndex].g = green;
 80006f2:	7065      	strb	r5, [r4, #1]
	leds[ledIndex].b = blue;
 80006f4:	70a5      	strb	r5, [r4, #2]
	WS2812B_Write(&ws2812b);
 80006f6:	4638      	mov	r0, r7
 80006f8:	3403      	adds	r4, #3
 80006fa:	f7ff fdc9 	bl	8000290 <WS2812B_Write>
	for (uint8_t led = 0; led < NUMBER_OF_LEDS; led++)
 80006fe:	42b4      	cmp	r4, r6
 8000700:	d1f6      	bne.n	80006f0 <initWs2812b+0xc>
}
 8000702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000704:	2000003c 	.word	0x2000003c
 8000708:	20000004 	.word	0x20000004

0800070c <running_example>:
void running_example(void){
 800070c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	current_led = (current_led + 1) % ws2812b.num_leds;
 8000710:	4f20      	ldr	r7, [pc, #128]	; (8000794 <running_example+0x88>)
 8000712:	4821      	ldr	r0, [pc, #132]	; (8000798 <running_example+0x8c>)
 8000714:	783d      	ldrb	r5, [r7, #0]
 8000716:	8882      	ldrh	r2, [r0, #4]
 8000718:	1c6b      	adds	r3, r5, #1
 800071a:	fb93 f5f2 	sdiv	r5, r3, r2
 800071e:	fb02 3515 	mls	r5, r2, r5, r3
 8000722:	fa5f fc85 	uxtb.w	ip, r5
	setLEDData(0,55,0, (current_led+1)% ws2812b.num_leds);
 8000726:	f10c 0801 	add.w	r8, ip, #1
	setLEDData(55,0,0, (current_led+2)% ws2812b.num_leds);
 800072a:	f10c 0e02 	add.w	lr, ip, #2
	setLEDData(0,55,0, (current_led+1)% ws2812b.num_leds);
 800072e:	fb98 f4f2 	sdiv	r4, r8, r2
	setLEDData(55,0,0, (current_led+2)% ws2812b.num_leds);
 8000732:	fb9e f1f2 	sdiv	r1, lr, r2
		memset(&leds[i], 0, sizeof(RGB_t));
 8000736:	2300      	movs	r3, #0
	leds[ledIndex].b = blue;
 8000738:	2637      	movs	r6, #55	; 0x37
	setLEDData(0,55,0, (current_led+1)% ws2812b.num_leds);
 800073a:	fb02 8414 	mls	r4, r2, r4, r8
	setLEDData(55,0,0, (current_led+2)% ws2812b.num_leds);
 800073e:	fb02 e111 	mls	r1, r2, r1, lr
 8000742:	b2e4      	uxtb	r4, r4
		memset(&leds[i], 0, sizeof(RGB_t));
 8000744:	4a15      	ldr	r2, [pc, #84]	; (800079c <running_example+0x90>)
 8000746:	b2c9      	uxtb	r1, r1
	leds[ledIndex].r = red;
 8000748:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800074c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8000750:	eb01 0141 	add.w	r1, r1, r1, lsl #1
	current_led = (current_led + 1) % ws2812b.num_leds;
 8000754:	703d      	strb	r5, [r7, #0]
	leds[ledIndex].r = red;
 8000756:	eb02 0e0c 	add.w	lr, r2, ip
 800075a:	1917      	adds	r7, r2, r4
 800075c:	1855      	adds	r5, r2, r1
		memset(&leds[i], 0, sizeof(RGB_t));
 800075e:	7153      	strb	r3, [r2, #5]
 8000760:	8013      	strh	r3, [r2, #0]
 8000762:	7093      	strb	r3, [r2, #2]
 8000764:	f8a2 3003 	strh.w	r3, [r2, #3]
 8000768:	80d3      	strh	r3, [r2, #6]
 800076a:	f8a2 3009 	strh.w	r3, [r2, #9]
 800076e:	7213      	strb	r3, [r2, #8]
 8000770:	72d3      	strb	r3, [r2, #11]
	leds[ledIndex].r = red;
 8000772:	f802 300c 	strb.w	r3, [r2, ip]
	leds[ledIndex].g = green;
 8000776:	f88e 3001 	strb.w	r3, [lr, #1]
	leds[ledIndex].b = blue;
 800077a:	f88e 6002 	strb.w	r6, [lr, #2]
	leds[ledIndex].r = red;
 800077e:	5513      	strb	r3, [r2, r4]
	leds[ledIndex].g = green;
 8000780:	707e      	strb	r6, [r7, #1]
	leds[ledIndex].b = blue;
 8000782:	70bb      	strb	r3, [r7, #2]
	leds[ledIndex].r = red;
 8000784:	5456      	strb	r6, [r2, r1]
	leds[ledIndex].g = green;
 8000786:	706b      	strb	r3, [r5, #1]
	leds[ledIndex].b = blue;
 8000788:	70ab      	strb	r3, [r5, #2]
}
 800078a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	WS2812B_Write(&ws2812b);
 800078e:	f7ff bd7f 	b.w	8000290 <WS2812B_Write>
 8000792:	bf00      	nop
 8000794:	20000038 	.word	0x20000038
 8000798:	20000004 	.word	0x20000004
 800079c:	2000003c 	.word	0x2000003c

080007a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a0:	480c      	ldr	r0, [pc, #48]	; (80007d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007a2:	490d      	ldr	r1, [pc, #52]	; (80007d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007a4:	4a0d      	ldr	r2, [pc, #52]	; (80007dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a8:	e002      	b.n	80007b0 <LoopCopyDataInit>

080007aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ae:	3304      	adds	r3, #4

080007b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b4:	d3f9      	bcc.n	80007aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007b6:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007b8:	4c0a      	ldr	r4, [pc, #40]	; (80007e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007bc:	e001      	b.n	80007c2 <LoopFillZerobss>

080007be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c0:	3204      	adds	r2, #4

080007c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c4:	d3fb      	bcc.n	80007be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007c6:	f7ff fd61 	bl	800028c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ca:	f000 fc8b 	bl	80010e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ce:	f7ff fce7 	bl	80001a0 <main>
  bx lr
 80007d2:	4770      	bx	lr
  ldr r0, =_sdata
 80007d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80007dc:	0800116c 	.word	0x0800116c
  ldr r2, =_sbss
 80007e0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80007e4:	2000004c 	.word	0x2000004c

080007e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007e8:	e7fe      	b.n	80007e8 <ADC1_2_IRQHandler>
	...

080007ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ec:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f2:	490d      	ldr	r1, [pc, #52]	; (8000828 <HAL_InitTick+0x3c>)
 80007f4:	4a0d      	ldr	r2, [pc, #52]	; (800082c <HAL_InitTick+0x40>)
 80007f6:	7809      	ldrb	r1, [r1, #0]
 80007f8:	6812      	ldr	r2, [r2, #0]
 80007fa:	fbb3 f3f1 	udiv	r3, r3, r1
{
 80007fe:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000800:	fbb2 f0f3 	udiv	r0, r2, r3
 8000804:	f000 f894 	bl	8000930 <HAL_SYSTICK_Config>
 8000808:	b908      	cbnz	r0, 800080e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800080a:	2d0f      	cmp	r5, #15
 800080c:	d901      	bls.n	8000812 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800080e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000810:	bd38      	pop	{r3, r4, r5, pc}
 8000812:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000814:	4602      	mov	r2, r0
 8000816:	4629      	mov	r1, r5
 8000818:	f04f 30ff 	mov.w	r0, #4294967295
 800081c:	f000 f852 	bl	80008c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <HAL_InitTick+0x44>)
 8000822:	4620      	mov	r0, r4
 8000824:	601d      	str	r5, [r3, #0]
}
 8000826:	bd38      	pop	{r3, r4, r5, pc}
 8000828:	20000014 	.word	0x20000014
 800082c:	20000000 	.word	0x20000000
 8000830:	20000018 	.word	0x20000018

08000834 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000834:	4a07      	ldr	r2, [pc, #28]	; (8000854 <HAL_Init+0x20>)
{
 8000836:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000838:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800083a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800083c:	f043 0310 	orr.w	r3, r3, #16
 8000840:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000842:	f000 f82d 	bl	80008a0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000846:	2000      	movs	r0, #0
 8000848:	f7ff ffd0 	bl	80007ec <HAL_InitTick>
  HAL_MspInit();
 800084c:	f7ff fcea 	bl	8000224 <HAL_MspInit>
}
 8000850:	2000      	movs	r0, #0
 8000852:	bd08      	pop	{r3, pc}
 8000854:	40022000 	.word	0x40022000

08000858 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000858:	4a03      	ldr	r2, [pc, #12]	; (8000868 <HAL_IncTick+0x10>)
 800085a:	4b04      	ldr	r3, [pc, #16]	; (800086c <HAL_IncTick+0x14>)
 800085c:	6811      	ldr	r1, [r2, #0]
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	440b      	add	r3, r1
 8000862:	6013      	str	r3, [r2, #0]
}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	20000048 	.word	0x20000048
 800086c:	20000014 	.word	0x20000014

08000870 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000870:	4b01      	ldr	r3, [pc, #4]	; (8000878 <HAL_GetTick+0x8>)
 8000872:	6818      	ldr	r0, [r3, #0]
}
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	20000048 	.word	0x20000048

0800087c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800087c:	b538      	push	{r3, r4, r5, lr}
 800087e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000880:	f7ff fff6 	bl	8000870 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000884:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000886:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000888:	d002      	beq.n	8000890 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800088a:	4b04      	ldr	r3, [pc, #16]	; (800089c <HAL_Delay+0x20>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000890:	f7ff ffee 	bl	8000870 <HAL_GetTick>
 8000894:	1b40      	subs	r0, r0, r5
 8000896:	42a0      	cmp	r0, r4
 8000898:	d3fa      	bcc.n	8000890 <HAL_Delay+0x14>
  {
  }
}
 800089a:	bd38      	pop	{r3, r4, r5, pc}
 800089c:	20000014 	.word	0x20000014

080008a0 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008a0:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a4:	4a06      	ldr	r2, [pc, #24]	; (80008c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008a6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008aa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ae:	400b      	ands	r3, r1
 80008b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80008b8:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80008ba:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c4:	4b18      	ldr	r3, [pc, #96]	; (8000928 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008c6:	b430      	push	{r4, r5}
 80008c8:	68db      	ldr	r3, [r3, #12]
 80008ca:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008ce:	f1c3 0507 	rsb	r5, r3, #7
 80008d2:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008d4:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d8:	bf28      	it	cs
 80008da:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008dc:	2c06      	cmp	r4, #6
 80008de:	d919      	bls.n	8000914 <HAL_NVIC_SetPriority+0x50>
 80008e0:	f04f 34ff 	mov.w	r4, #4294967295
 80008e4:	3b03      	subs	r3, #3
 80008e6:	409c      	lsls	r4, r3
 80008e8:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ec:	f04f 32ff 	mov.w	r2, #4294967295
 80008f0:	40aa      	lsls	r2, r5
 80008f2:	ea21 0102 	bic.w	r1, r1, r2
 80008f6:	fa01 f203 	lsl.w	r2, r1, r3
 80008fa:	4322      	orrs	r2, r4
 80008fc:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 80008fe:	2800      	cmp	r0, #0
 8000900:	b2d2      	uxtb	r2, r2
 8000902:	db0a      	blt.n	800091a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000904:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000908:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800090c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000910:	bc30      	pop	{r4, r5}
 8000912:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000914:	2400      	movs	r4, #0
 8000916:	4623      	mov	r3, r4
 8000918:	e7e8      	b.n	80008ec <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091a:	4b04      	ldr	r3, [pc, #16]	; (800092c <HAL_NVIC_SetPriority+0x68>)
 800091c:	f000 000f 	and.w	r0, r0, #15
 8000920:	4403      	add	r3, r0
 8000922:	761a      	strb	r2, [r3, #24]
 8000924:	bc30      	pop	{r4, r5}
 8000926:	4770      	bx	lr
 8000928:	e000ed00 	.word	0xe000ed00
 800092c:	e000ecfc 	.word	0xe000ecfc

08000930 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000930:	3801      	subs	r0, #1
 8000932:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000936:	d20d      	bcs.n	8000954 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000938:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093a:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800093c:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800093e:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000942:	4c06      	ldr	r4, [pc, #24]	; (800095c <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000944:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000946:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800094a:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 800094c:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800094e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000950:	6019      	str	r1, [r3, #0]
 8000952:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000954:	2001      	movs	r0, #1
 8000956:	4770      	bx	lr
 8000958:	e000e010 	.word	0xe000e010
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000960:	680a      	ldr	r2, [r1, #0]
 8000962:	2a00      	cmp	r2, #0
 8000964:	f000 80db 	beq.w	8000b1e <HAL_GPIO_Init+0x1be>
{
 8000968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00u;
 800096c:	f04f 0a00 	mov.w	sl, #0
{
 8000970:	b085      	sub	sp, #20
  uint32_t position = 0x00u;
 8000972:	4655      	mov	r5, sl
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000974:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 8000b48 <HAL_GPIO_Init+0x1e8>
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000978:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 8000b4c <HAL_GPIO_Init+0x1ec>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800097c:	4f6d      	ldr	r7, [pc, #436]	; (8000b34 <HAL_GPIO_Init+0x1d4>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800097e:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8000b50 <HAL_GPIO_Init+0x1f0>
 8000982:	e003      	b.n	800098c <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 8000984:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000986:	fa32 f305 	lsrs.w	r3, r2, r5
 800098a:	d078      	beq.n	8000a7e <HAL_GPIO_Init+0x11e>
    ioposition = (0x01uL << position);
 800098c:	2301      	movs	r3, #1
 800098e:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000990:	ea02 0403 	and.w	r4, r2, r3
    if (iocurrent == ioposition)
 8000994:	42a3      	cmp	r3, r4
 8000996:	d1f5      	bne.n	8000984 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8000998:	684a      	ldr	r2, [r1, #4]
 800099a:	2a12      	cmp	r2, #18
 800099c:	f000 809e 	beq.w	8000adc <HAL_GPIO_Init+0x17c>
 80009a0:	f200 8087 	bhi.w	8000ab2 <HAL_GPIO_Init+0x152>
 80009a4:	2a02      	cmp	r2, #2
 80009a6:	f000 809d 	beq.w	8000ae4 <HAL_GPIO_Init+0x184>
 80009aa:	d97c      	bls.n	8000aa6 <HAL_GPIO_Init+0x146>
 80009ac:	2a03      	cmp	r2, #3
 80009ae:	d069      	beq.n	8000a84 <HAL_GPIO_Init+0x124>
 80009b0:	2a11      	cmp	r2, #17
 80009b2:	d102      	bne.n	80009ba <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009b4:	68cb      	ldr	r3, [r1, #12]
 80009b6:	f103 0a04 	add.w	sl, r3, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009ba:	2cff      	cmp	r4, #255	; 0xff
 80009bc:	d866      	bhi.n	8000a8c <HAL_GPIO_Init+0x12c>
 80009be:	4681      	mov	r9, r0
 80009c0:	6803      	ldr	r3, [r0, #0]
 80009c2:	00aa      	lsls	r2, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009c4:	260f      	movs	r6, #15
 80009c6:	fa06 fb02 	lsl.w	fp, r6, r2
 80009ca:	ea23 030b 	bic.w	r3, r3, fp
 80009ce:	fa0a f202 	lsl.w	r2, sl, r2
 80009d2:	4313      	orrs	r3, r2
 80009d4:	f8c9 3000 	str.w	r3, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009d8:	684a      	ldr	r2, [r1, #4]
 80009da:	00d3      	lsls	r3, r2, #3
 80009dc:	d561      	bpl.n	8000aa2 <HAL_GPIO_Init+0x142>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009de:	f8dc 9018 	ldr.w	r9, [ip, #24]
 80009e2:	f025 0303 	bic.w	r3, r5, #3
 80009e6:	f049 0901 	orr.w	r9, r9, #1
 80009ea:	f8cc 9018 	str.w	r9, [ip, #24]
 80009ee:	f8dc 9018 	ldr.w	r9, [ip, #24]
 80009f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80009f6:	f009 0901 	and.w	r9, r9, #1
 80009fa:	f8cd 900c 	str.w	r9, [sp, #12]
 80009fe:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a02:	f005 0903 	and.w	r9, r5, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a06:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a0a:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000a0e:	f8d3 b008 	ldr.w	fp, [r3, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a12:	fa06 f609 	lsl.w	r6, r6, r9
 8000a16:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a1a:	4570      	cmp	r0, lr
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a1c:	9601      	str	r6, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a1e:	d011      	beq.n	8000a44 <HAL_GPIO_Init+0xe4>
 8000a20:	4540      	cmp	r0, r8
 8000a22:	d063      	beq.n	8000aec <HAL_GPIO_Init+0x18c>
 8000a24:	4e44      	ldr	r6, [pc, #272]	; (8000b38 <HAL_GPIO_Init+0x1d8>)
 8000a26:	42b0      	cmp	r0, r6
 8000a28:	d07a      	beq.n	8000b20 <HAL_GPIO_Init+0x1c0>
 8000a2a:	4e44      	ldr	r6, [pc, #272]	; (8000b3c <HAL_GPIO_Init+0x1dc>)
 8000a2c:	42b0      	cmp	r0, r6
 8000a2e:	bf0c      	ite	eq
 8000a30:	f04f 0b03 	moveq.w	fp, #3
 8000a34:	f04f 0b04 	movne.w	fp, #4
 8000a38:	9e01      	ldr	r6, [sp, #4]
 8000a3a:	fa0b f909 	lsl.w	r9, fp, r9
 8000a3e:	ea46 0609 	orr.w	r6, r6, r9
 8000a42:	9601      	str	r6, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a44:	609e      	str	r6, [r3, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000a46:	683b      	ldr	r3, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a48:	03d6      	lsls	r6, r2, #15
          SET_BIT(EXTI->IMR, iocurrent);
 8000a4a:	bf4c      	ite	mi
 8000a4c:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a4e:	43a3      	bicpl	r3, r4
 8000a50:	603b      	str	r3, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000a52:	687b      	ldr	r3, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a54:	0396      	lsls	r6, r2, #14
          SET_BIT(EXTI->EMR, iocurrent);
 8000a56:	bf4c      	ite	mi
 8000a58:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a5a:	43a3      	bicpl	r3, r4
 8000a5c:	607b      	str	r3, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a5e:	68bb      	ldr	r3, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a60:	02d6      	lsls	r6, r2, #11
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a62:	bf4c      	ite	mi
 8000a64:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a66:	43a3      	bicpl	r3, r4
 8000a68:	60bb      	str	r3, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a6a:	0292      	lsls	r2, r2, #10
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a6c:	68fb      	ldr	r3, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a6e:	d515      	bpl.n	8000a9c <HAL_GPIO_Init+0x13c>
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a70:	431c      	orrs	r4, r3
 8000a72:	60fc      	str	r4, [r7, #12]
 8000a74:	680a      	ldr	r2, [r1, #0]
	position++;
 8000a76:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a78:	fa32 f305 	lsrs.w	r3, r2, r5
 8000a7c:	d186      	bne.n	800098c <HAL_GPIO_Init+0x2c>
  }
}
 8000a7e:	b005      	add	sp, #20
 8000a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a84:	2cff      	cmp	r4, #255	; 0xff
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a86:	f04f 0a00 	mov.w	sl, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a8a:	d998      	bls.n	80009be <HAL_GPIO_Init+0x5e>
 8000a8c:	f105 4280 	add.w	r2, r5, #1073741824	; 0x40000000
 8000a90:	3a08      	subs	r2, #8
 8000a92:	6843      	ldr	r3, [r0, #4]
 8000a94:	0092      	lsls	r2, r2, #2
 8000a96:	f100 0904 	add.w	r9, r0, #4
 8000a9a:	e793      	b.n	80009c4 <HAL_GPIO_Init+0x64>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a9c:	ea23 0404 	bic.w	r4, r3, r4
 8000aa0:	60fc      	str	r4, [r7, #12]
 8000aa2:	680a      	ldr	r2, [r1, #0]
 8000aa4:	e76e      	b.n	8000984 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8000aa6:	b1a2      	cbz	r2, 8000ad2 <HAL_GPIO_Init+0x172>
 8000aa8:	2a01      	cmp	r2, #1
 8000aaa:	d186      	bne.n	80009ba <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000aac:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8000ab0:	e783      	b.n	80009ba <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 8000ab2:	4e23      	ldr	r6, [pc, #140]	; (8000b40 <HAL_GPIO_Init+0x1e0>)
 8000ab4:	42b2      	cmp	r2, r6
 8000ab6:	d00c      	beq.n	8000ad2 <HAL_GPIO_Init+0x172>
 8000ab8:	d920      	bls.n	8000afc <HAL_GPIO_Init+0x19c>
 8000aba:	4e22      	ldr	r6, [pc, #136]	; (8000b44 <HAL_GPIO_Init+0x1e4>)
 8000abc:	42b2      	cmp	r2, r6
 8000abe:	d008      	beq.n	8000ad2 <HAL_GPIO_Init+0x172>
 8000ac0:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8000ac4:	42b2      	cmp	r2, r6
 8000ac6:	d004      	beq.n	8000ad2 <HAL_GPIO_Init+0x172>
 8000ac8:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8000acc:	42b2      	cmp	r2, r6
 8000ace:	f47f af74 	bne.w	80009ba <HAL_GPIO_Init+0x5a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ad2:	688a      	ldr	r2, [r1, #8]
 8000ad4:	b9e2      	cbnz	r2, 8000b10 <HAL_GPIO_Init+0x1b0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ad6:	f04f 0a04 	mov.w	sl, #4
 8000ada:	e76e      	b.n	80009ba <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000adc:	68cb      	ldr	r3, [r1, #12]
 8000ade:	f103 0a0c 	add.w	sl, r3, #12
          break;
 8000ae2:	e76a      	b.n	80009ba <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ae4:	68cb      	ldr	r3, [r1, #12]
 8000ae6:	f103 0a08 	add.w	sl, r3, #8
          break;
 8000aea:	e766      	b.n	80009ba <HAL_GPIO_Init+0x5a>
 8000aec:	f04f 0b01 	mov.w	fp, #1
 8000af0:	fa0b f909 	lsl.w	r9, fp, r9
 8000af4:	ea46 0609 	orr.w	r6, r6, r9
 8000af8:	9601      	str	r6, [sp, #4]
 8000afa:	e7a3      	b.n	8000a44 <HAL_GPIO_Init+0xe4>
      switch (GPIO_Init->Mode)
 8000afc:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8000b00:	42b2      	cmp	r2, r6
 8000b02:	d0e6      	beq.n	8000ad2 <HAL_GPIO_Init+0x172>
 8000b04:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8000b08:	42b2      	cmp	r2, r6
 8000b0a:	f47f af56 	bne.w	80009ba <HAL_GPIO_Init+0x5a>
 8000b0e:	e7e0      	b.n	8000ad2 <HAL_GPIO_Init+0x172>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b10:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000b12:	bf0c      	ite	eq
 8000b14:	6103      	streq	r3, [r0, #16]
            GPIOx->BRR = ioposition;
 8000b16:	6143      	strne	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b18:	f04f 0a08 	mov.w	sl, #8
 8000b1c:	e74d      	b.n	80009ba <HAL_GPIO_Init+0x5a>
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0b02 	mov.w	fp, #2
 8000b24:	9e01      	ldr	r6, [sp, #4]
 8000b26:	fa0b f909 	lsl.w	r9, fp, r9
 8000b2a:	ea46 0609 	orr.w	r6, r6, r9
 8000b2e:	9601      	str	r6, [sp, #4]
 8000b30:	e788      	b.n	8000a44 <HAL_GPIO_Init+0xe4>
 8000b32:	bf00      	nop
 8000b34:	40010400 	.word	0x40010400
 8000b38:	40011000 	.word	0x40011000
 8000b3c:	40011400 	.word	0x40011400
 8000b40:	10210000 	.word	0x10210000
 8000b44:	10310000 	.word	0x10310000
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40010800 	.word	0x40010800
 8000b50:	40010c00 	.word	0x40010c00

08000b54 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b54:	b902      	cbnz	r2, 8000b58 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b56:	0409      	lsls	r1, r1, #16
 8000b58:	6101      	str	r1, [r0, #16]
  }
}
 8000b5a:	4770      	bx	lr

08000b5c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b5c:	2800      	cmp	r0, #0
 8000b5e:	f000 8155 	beq.w	8000e0c <HAL_RCC_OscConfig+0x2b0>
{
 8000b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b66:	6803      	ldr	r3, [r0, #0]
{
 8000b68:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b6a:	07dd      	lsls	r5, r3, #31
 8000b6c:	4604      	mov	r4, r0
 8000b6e:	d535      	bpl.n	8000bdc <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b70:	49a8      	ldr	r1, [pc, #672]	; (8000e14 <HAL_RCC_OscConfig+0x2b8>)
 8000b72:	684a      	ldr	r2, [r1, #4]
 8000b74:	f002 020c 	and.w	r2, r2, #12
 8000b78:	2a04      	cmp	r2, #4
 8000b7a:	f000 8105 	beq.w	8000d88 <HAL_RCC_OscConfig+0x22c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b7e:	684a      	ldr	r2, [r1, #4]
 8000b80:	f002 020c 	and.w	r2, r2, #12
 8000b84:	2a08      	cmp	r2, #8
 8000b86:	f000 80fb 	beq.w	8000d80 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b8a:	6863      	ldr	r3, [r4, #4]
 8000b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b90:	d010      	beq.n	8000bb4 <HAL_RCC_OscConfig+0x58>
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f000 8120 	beq.w	8000dd8 <HAL_RCC_OscConfig+0x27c>
 8000b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b9c:	f000 8178 	beq.w	8000e90 <HAL_RCC_OscConfig+0x334>
 8000ba0:	4b9c      	ldr	r3, [pc, #624]	; (8000e14 <HAL_RCC_OscConfig+0x2b8>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	e004      	b.n	8000bbe <HAL_RCC_OscConfig+0x62>
 8000bb4:	4a97      	ldr	r2, [pc, #604]	; (8000e14 <HAL_RCC_OscConfig+0x2b8>)
 8000bb6:	6813      	ldr	r3, [r2, #0]
 8000bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bbc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bbe:	f7ff fe57 	bl	8000870 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bc2:	4d94      	ldr	r5, [pc, #592]	; (8000e14 <HAL_RCC_OscConfig+0x2b8>)
        tickstart = HAL_GetTick();
 8000bc4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bc6:	e005      	b.n	8000bd4 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bc8:	f7ff fe52 	bl	8000870 <HAL_GetTick>
 8000bcc:	1b80      	subs	r0, r0, r6
 8000bce:	2864      	cmp	r0, #100	; 0x64
 8000bd0:	f200 80f5 	bhi.w	8000dbe <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bd4:	682b      	ldr	r3, [r5, #0]
 8000bd6:	039a      	lsls	r2, r3, #14
 8000bd8:	d5f6      	bpl.n	8000bc8 <HAL_RCC_OscConfig+0x6c>
 8000bda:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bdc:	079f      	lsls	r7, r3, #30
 8000bde:	d44d      	bmi.n	8000c7c <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000be0:	071a      	lsls	r2, r3, #28
 8000be2:	d522      	bpl.n	8000c2a <HAL_RCC_OscConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000be4:	69a3      	ldr	r3, [r4, #24]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f000 80ba 	beq.w	8000d60 <HAL_RCC_OscConfig+0x204>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000bec:	2201      	movs	r2, #1
 8000bee:	4b8a      	ldr	r3, [pc, #552]	; (8000e18 <HAL_RCC_OscConfig+0x2bc>)

      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bf0:	4d88      	ldr	r5, [pc, #544]	; (8000e14 <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_ENABLE();
 8000bf2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000bf4:	f7ff fe3c 	bl	8000870 <HAL_GetTick>
 8000bf8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bfa:	e005      	b.n	8000c08 <HAL_RCC_OscConfig+0xac>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bfc:	f7ff fe38 	bl	8000870 <HAL_GetTick>
 8000c00:	1b80      	subs	r0, r0, r6
 8000c02:	2802      	cmp	r0, #2
 8000c04:	f200 80db 	bhi.w	8000dbe <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c08:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000c0a:	079b      	lsls	r3, r3, #30
 8000c0c:	d5f6      	bpl.n	8000bfc <HAL_RCC_OscConfig+0xa0>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000c0e:	4b83      	ldr	r3, [pc, #524]	; (8000e1c <HAL_RCC_OscConfig+0x2c0>)
 8000c10:	4a83      	ldr	r2, [pc, #524]	; (8000e20 <HAL_RCC_OscConfig+0x2c4>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	fba2 2303 	umull	r2, r3, r2, r3
 8000c18:	0a5b      	lsrs	r3, r3, #9
 8000c1a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000c1c:	bf00      	nop
  }
  while (Delay --);
 8000c1e:	9b01      	ldr	r3, [sp, #4]
 8000c20:	1e5a      	subs	r2, r3, #1
 8000c22:	9201      	str	r2, [sp, #4]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d1f9      	bne.n	8000c1c <HAL_RCC_OscConfig+0xc0>
 8000c28:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c2a:	075d      	lsls	r5, r3, #29
 8000c2c:	d569      	bpl.n	8000d02 <HAL_RCC_OscConfig+0x1a6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c2e:	4b79      	ldr	r3, [pc, #484]	; (8000e14 <HAL_RCC_OscConfig+0x2b8>)
 8000c30:	69da      	ldr	r2, [r3, #28]
 8000c32:	00d0      	lsls	r0, r2, #3
 8000c34:	f100 80ec 	bmi.w	8000e10 <HAL_RCC_OscConfig+0x2b4>
      pwrclkchanged = SET;
 8000c38:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c3a:	69da      	ldr	r2, [r3, #28]
 8000c3c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c40:	61da      	str	r2, [r3, #28]
 8000c42:	69db      	ldr	r3, [r3, #28]
 8000c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c4c:	4b75      	ldr	r3, [pc, #468]	; (8000e24 <HAL_RCC_OscConfig+0x2c8>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	05d1      	lsls	r1, r2, #23
 8000c52:	f140 80a3 	bpl.w	8000d9c <HAL_RCC_OscConfig+0x240>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c56:	68e3      	ldr	r3, [r4, #12]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d037      	beq.n	8000ccc <HAL_RCC_OscConfig+0x170>
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	f000 80e7 	beq.w	8000e30 <HAL_RCC_OscConfig+0x2d4>
 8000c62:	2b05      	cmp	r3, #5
 8000c64:	4b6b      	ldr	r3, [pc, #428]	; (8000e14 <HAL_RCC_OscConfig+0x2b8>)
 8000c66:	6a1a      	ldr	r2, [r3, #32]
 8000c68:	f000 811f 	beq.w	8000eaa <HAL_RCC_OscConfig+0x34e>
 8000c6c:	f022 0201 	bic.w	r2, r2, #1
 8000c70:	621a      	str	r2, [r3, #32]
 8000c72:	6a1a      	ldr	r2, [r3, #32]
 8000c74:	f022 0204 	bic.w	r2, r2, #4
 8000c78:	621a      	str	r2, [r3, #32]
 8000c7a:	e02c      	b.n	8000cd6 <HAL_RCC_OscConfig+0x17a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c7c:	4a65      	ldr	r2, [pc, #404]	; (8000e14 <HAL_RCC_OscConfig+0x2b8>)
 8000c7e:	6851      	ldr	r1, [r2, #4]
 8000c80:	f011 0f0c 	tst.w	r1, #12
 8000c84:	d061      	beq.n	8000d4a <HAL_RCC_OscConfig+0x1ee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c86:	6851      	ldr	r1, [r2, #4]
 8000c88:	f001 010c 	and.w	r1, r1, #12
 8000c8c:	2908      	cmp	r1, #8
 8000c8e:	d059      	beq.n	8000d44 <HAL_RCC_OscConfig+0x1e8>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c90:	6923      	ldr	r3, [r4, #16]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <HAL_RCC_OscConfig+0x312>
        __HAL_RCC_HSI_ENABLE();
 8000c98:	2201      	movs	r2, #1
 8000c9a:	4b63      	ldr	r3, [pc, #396]	; (8000e28 <HAL_RCC_OscConfig+0x2cc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c9c:	4d5d      	ldr	r5, [pc, #372]	; (8000e14 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_ENABLE();
 8000c9e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ca0:	f7ff fde6 	bl	8000870 <HAL_GetTick>
 8000ca4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ca6:	e005      	b.n	8000cb4 <HAL_RCC_OscConfig+0x158>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ca8:	f7ff fde2 	bl	8000870 <HAL_GetTick>
 8000cac:	1b80      	subs	r0, r0, r6
 8000cae:	2802      	cmp	r0, #2
 8000cb0:	f200 8085 	bhi.w	8000dbe <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb4:	682b      	ldr	r3, [r5, #0]
 8000cb6:	0798      	lsls	r0, r3, #30
 8000cb8:	d5f6      	bpl.n	8000ca8 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cba:	682b      	ldr	r3, [r5, #0]
 8000cbc:	6962      	ldr	r2, [r4, #20]
 8000cbe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000cc2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000cc6:	602b      	str	r3, [r5, #0]
 8000cc8:	6823      	ldr	r3, [r4, #0]
 8000cca:	e789      	b.n	8000be0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ccc:	4a51      	ldr	r2, [pc, #324]	; (8000e14 <HAL_RCC_OscConfig+0x2b8>)
 8000cce:	6a13      	ldr	r3, [r2, #32]
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8000cd6:	f7ff fdcb 	bl	8000870 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cda:	4e4e      	ldr	r6, [pc, #312]	; (8000e14 <HAL_RCC_OscConfig+0x2b8>)
      tickstart = HAL_GetTick();
 8000cdc:	4680      	mov	r8, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cde:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ce2:	e005      	b.n	8000cf0 <HAL_RCC_OscConfig+0x194>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ce4:	f7ff fdc4 	bl	8000870 <HAL_GetTick>
 8000ce8:	eba0 0008 	sub.w	r0, r0, r8
 8000cec:	42b8      	cmp	r0, r7
 8000cee:	d866      	bhi.n	8000dbe <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cf0:	6a33      	ldr	r3, [r6, #32]
 8000cf2:	079b      	lsls	r3, r3, #30
 8000cf4:	d5f6      	bpl.n	8000ce4 <HAL_RCC_OscConfig+0x188>
    if (pwrclkchanged == SET)
 8000cf6:	b125      	cbz	r5, 8000d02 <HAL_RCC_OscConfig+0x1a6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000cf8:	4a46      	ldr	r2, [pc, #280]	; (8000e14 <HAL_RCC_OscConfig+0x2b8>)
 8000cfa:	69d3      	ldr	r3, [r2, #28]
 8000cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d00:	61d3      	str	r3, [r2, #28]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d02:	69e0      	ldr	r0, [r4, #28]
 8000d04:	b1d0      	cbz	r0, 8000d3c <HAL_RCC_OscConfig+0x1e0>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d06:	4d43      	ldr	r5, [pc, #268]	; (8000e14 <HAL_RCC_OscConfig+0x2b8>)
 8000d08:	686a      	ldr	r2, [r5, #4]
 8000d0a:	f002 020c 	and.w	r2, r2, #12
 8000d0e:	2a08      	cmp	r2, #8
 8000d10:	f000 80d3 	beq.w	8000eba <HAL_RCC_OscConfig+0x35e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d14:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000d16:	f04f 0100 	mov.w	r1, #0
 8000d1a:	4a44      	ldr	r2, [pc, #272]	; (8000e2c <HAL_RCC_OscConfig+0x2d0>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d1c:	f000 80de 	beq.w	8000edc <HAL_RCC_OscConfig+0x380>
        __HAL_RCC_PLL_DISABLE();
 8000d20:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8000d22:	f7ff fda5 	bl	8000870 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d26:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8000d28:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d2a:	e004      	b.n	8000d36 <HAL_RCC_OscConfig+0x1da>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d2c:	f7ff fda0 	bl	8000870 <HAL_GetTick>
 8000d30:	1b40      	subs	r0, r0, r5
 8000d32:	2802      	cmp	r0, #2
 8000d34:	d843      	bhi.n	8000dbe <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d36:	6823      	ldr	r3, [r4, #0]
 8000d38:	019b      	lsls	r3, r3, #6
 8000d3a:	d4f7      	bmi.n	8000d2c <HAL_RCC_OscConfig+0x1d0>
  return HAL_OK;
 8000d3c:	2000      	movs	r0, #0
}
 8000d3e:	b002      	add	sp, #8
 8000d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d44:	6852      	ldr	r2, [r2, #4]
 8000d46:	03d6      	lsls	r6, r2, #15
 8000d48:	d4a2      	bmi.n	8000c90 <HAL_RCC_OscConfig+0x134>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d4a:	4a32      	ldr	r2, [pc, #200]	; (8000e14 <HAL_RCC_OscConfig+0x2b8>)
 8000d4c:	6812      	ldr	r2, [r2, #0]
 8000d4e:	0795      	lsls	r5, r2, #30
 8000d50:	d539      	bpl.n	8000dc6 <HAL_RCC_OscConfig+0x26a>
 8000d52:	6922      	ldr	r2, [r4, #16]
 8000d54:	2a01      	cmp	r2, #1
 8000d56:	d036      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x26a>
        return HAL_ERROR;
 8000d58:	2001      	movs	r0, #1
}
 8000d5a:	b002      	add	sp, #8
 8000d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8000d60:	4a2d      	ldr	r2, [pc, #180]	; (8000e18 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d62:	4d2c      	ldr	r5, [pc, #176]	; (8000e14 <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_DISABLE();
 8000d64:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000d66:	f7ff fd83 	bl	8000870 <HAL_GetTick>
 8000d6a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d6c:	e004      	b.n	8000d78 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d6e:	f7ff fd7f 	bl	8000870 <HAL_GetTick>
 8000d72:	1b80      	subs	r0, r0, r6
 8000d74:	2802      	cmp	r0, #2
 8000d76:	d822      	bhi.n	8000dbe <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d78:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000d7a:	079f      	lsls	r7, r3, #30
 8000d7c:	d4f7      	bmi.n	8000d6e <HAL_RCC_OscConfig+0x212>
 8000d7e:	e753      	b.n	8000c28 <HAL_RCC_OscConfig+0xcc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d80:	684a      	ldr	r2, [r1, #4]
 8000d82:	03d0      	lsls	r0, r2, #15
 8000d84:	f57f af01 	bpl.w	8000b8a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d88:	4a22      	ldr	r2, [pc, #136]	; (8000e14 <HAL_RCC_OscConfig+0x2b8>)
 8000d8a:	6812      	ldr	r2, [r2, #0]
 8000d8c:	0391      	lsls	r1, r2, #14
 8000d8e:	f57f af25 	bpl.w	8000bdc <HAL_RCC_OscConfig+0x80>
 8000d92:	6862      	ldr	r2, [r4, #4]
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f47f af21 	bne.w	8000bdc <HAL_RCC_OscConfig+0x80>
 8000d9a:	e7dd      	b.n	8000d58 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d9c:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d9e:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000da0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000da4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000da6:	f7ff fd63 	bl	8000870 <HAL_GetTick>
 8000daa:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dac:	6833      	ldr	r3, [r6, #0]
 8000dae:	05da      	lsls	r2, r3, #23
 8000db0:	f53f af51 	bmi.w	8000c56 <HAL_RCC_OscConfig+0xfa>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000db4:	f7ff fd5c 	bl	8000870 <HAL_GetTick>
 8000db8:	1bc0      	subs	r0, r0, r7
 8000dba:	2864      	cmp	r0, #100	; 0x64
 8000dbc:	d9f6      	bls.n	8000dac <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 8000dbe:	2003      	movs	r0, #3
}
 8000dc0:	b002      	add	sp, #8
 8000dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dc6:	4913      	ldr	r1, [pc, #76]	; (8000e14 <HAL_RCC_OscConfig+0x2b8>)
 8000dc8:	6960      	ldr	r0, [r4, #20]
 8000dca:	680a      	ldr	r2, [r1, #0]
 8000dcc:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000dd0:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8000dd4:	600a      	str	r2, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dd6:	e703      	b.n	8000be0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ddc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000de0:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000de2:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000de4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000df0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000df2:	f7ff fd3d 	bl	8000870 <HAL_GetTick>
 8000df6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000df8:	e004      	b.n	8000e04 <HAL_RCC_OscConfig+0x2a8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dfa:	f7ff fd39 	bl	8000870 <HAL_GetTick>
 8000dfe:	1b80      	subs	r0, r0, r6
 8000e00:	2864      	cmp	r0, #100	; 0x64
 8000e02:	d8dc      	bhi.n	8000dbe <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e04:	682b      	ldr	r3, [r5, #0]
 8000e06:	039b      	lsls	r3, r3, #14
 8000e08:	d4f7      	bmi.n	8000dfa <HAL_RCC_OscConfig+0x29e>
 8000e0a:	e6e6      	b.n	8000bda <HAL_RCC_OscConfig+0x7e>
    return HAL_ERROR;
 8000e0c:	2001      	movs	r0, #1
}
 8000e0e:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 8000e10:	2500      	movs	r5, #0
 8000e12:	e71b      	b.n	8000c4c <HAL_RCC_OscConfig+0xf0>
 8000e14:	40021000 	.word	0x40021000
 8000e18:	42420480 	.word	0x42420480
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	10624dd3 	.word	0x10624dd3
 8000e24:	40007000 	.word	0x40007000
 8000e28:	42420000 	.word	0x42420000
 8000e2c:	42420060 	.word	0x42420060
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e34:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000e38:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e3a:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e3c:	f022 0201 	bic.w	r2, r2, #1
 8000e40:	621a      	str	r2, [r3, #32]
 8000e42:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e44:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e48:	f022 0204 	bic.w	r2, r2, #4
 8000e4c:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 8000e4e:	f7ff fd0f 	bl	8000870 <HAL_GetTick>
 8000e52:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e54:	e004      	b.n	8000e60 <HAL_RCC_OscConfig+0x304>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e56:	f7ff fd0b 	bl	8000870 <HAL_GetTick>
 8000e5a:	1bc0      	subs	r0, r0, r7
 8000e5c:	4540      	cmp	r0, r8
 8000e5e:	d8ae      	bhi.n	8000dbe <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e60:	6a33      	ldr	r3, [r6, #32]
 8000e62:	0798      	lsls	r0, r3, #30
 8000e64:	d4f7      	bmi.n	8000e56 <HAL_RCC_OscConfig+0x2fa>
    if (pwrclkchanged == SET)
 8000e66:	2d00      	cmp	r5, #0
 8000e68:	f43f af4b 	beq.w	8000d02 <HAL_RCC_OscConfig+0x1a6>
 8000e6c:	e744      	b.n	8000cf8 <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_HSI_DISABLE();
 8000e6e:	4a34      	ldr	r2, [pc, #208]	; (8000f40 <HAL_RCC_OscConfig+0x3e4>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e70:	4d34      	ldr	r5, [pc, #208]	; (8000f44 <HAL_RCC_OscConfig+0x3e8>)
        __HAL_RCC_HSI_DISABLE();
 8000e72:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000e74:	f7ff fcfc 	bl	8000870 <HAL_GetTick>
 8000e78:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e7a:	e004      	b.n	8000e86 <HAL_RCC_OscConfig+0x32a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e7c:	f7ff fcf8 	bl	8000870 <HAL_GetTick>
 8000e80:	1b80      	subs	r0, r0, r6
 8000e82:	2802      	cmp	r0, #2
 8000e84:	d89b      	bhi.n	8000dbe <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e86:	682b      	ldr	r3, [r5, #0]
 8000e88:	0799      	lsls	r1, r3, #30
 8000e8a:	d4f7      	bmi.n	8000e7c <HAL_RCC_OscConfig+0x320>
 8000e8c:	6823      	ldr	r3, [r4, #0]
 8000e8e:	e6a7      	b.n	8000be0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e94:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	e689      	b.n	8000bbe <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eaa:	f042 0204 	orr.w	r2, r2, #4
 8000eae:	621a      	str	r2, [r3, #32]
 8000eb0:	6a1a      	ldr	r2, [r3, #32]
 8000eb2:	f042 0201 	orr.w	r2, r2, #1
 8000eb6:	621a      	str	r2, [r3, #32]
 8000eb8:	e70d      	b.n	8000cd6 <HAL_RCC_OscConfig+0x17a>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000eba:	2801      	cmp	r0, #1
 8000ebc:	f43f af4d 	beq.w	8000d5a <HAL_RCC_OscConfig+0x1fe>
        pll_config = RCC->CFGR;
 8000ec0:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ec2:	6a22      	ldr	r2, [r4, #32]
 8000ec4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000ec8:	4291      	cmp	r1, r2
 8000eca:	f47f af45 	bne.w	8000d58 <HAL_RCC_OscConfig+0x1fc>
 8000ece:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000ed0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 8000ed4:	1a18      	subs	r0, r3, r0
 8000ed6:	bf18      	it	ne
 8000ed8:	2001      	movne	r0, #1
 8000eda:	e73e      	b.n	8000d5a <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_PLL_DISABLE();
 8000edc:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8000ede:	f7ff fcc7 	bl	8000870 <HAL_GetTick>
 8000ee2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ee4:	e005      	b.n	8000ef2 <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ee6:	f7ff fcc3 	bl	8000870 <HAL_GetTick>
 8000eea:	1b80      	subs	r0, r0, r6
 8000eec:	2802      	cmp	r0, #2
 8000eee:	f63f af66 	bhi.w	8000dbe <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ef2:	682b      	ldr	r3, [r5, #0]
 8000ef4:	0199      	lsls	r1, r3, #6
 8000ef6:	d4f6      	bmi.n	8000ee6 <HAL_RCC_OscConfig+0x38a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ef8:	6a22      	ldr	r2, [r4, #32]
 8000efa:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000efe:	d105      	bne.n	8000f0c <HAL_RCC_OscConfig+0x3b0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f00:	686b      	ldr	r3, [r5, #4]
 8000f02:	68a1      	ldr	r1, [r4, #8]
 8000f04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f08:	430b      	orrs	r3, r1
 8000f0a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f0c:	2501      	movs	r5, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <HAL_RCC_OscConfig+0x3e8>)
 8000f10:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000f12:	6859      	ldr	r1, [r3, #4]
 8000f14:	4302      	orrs	r2, r0
 8000f16:	f421 1174 	bic.w	r1, r1, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8000f1a:	480b      	ldr	r0, [pc, #44]	; (8000f48 <HAL_RCC_OscConfig+0x3ec>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f20:	6005      	str	r5, [r0, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f22:	461c      	mov	r4, r3
        tickstart = HAL_GetTick();
 8000f24:	f7ff fca4 	bl	8000870 <HAL_GetTick>
 8000f28:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f2a:	e005      	b.n	8000f38 <HAL_RCC_OscConfig+0x3dc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f2c:	f7ff fca0 	bl	8000870 <HAL_GetTick>
 8000f30:	1b40      	subs	r0, r0, r5
 8000f32:	2802      	cmp	r0, #2
 8000f34:	f63f af43 	bhi.w	8000dbe <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f38:	6823      	ldr	r3, [r4, #0]
 8000f3a:	019a      	lsls	r2, r3, #6
 8000f3c:	d5f6      	bpl.n	8000f2c <HAL_RCC_OscConfig+0x3d0>
 8000f3e:	e6fd      	b.n	8000d3c <HAL_RCC_OscConfig+0x1e0>
 8000f40:	42420000 	.word	0x42420000
 8000f44:	40021000 	.word	0x40021000
 8000f48:	42420060 	.word	0x42420060

08000f4c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8000f4c:	b178      	cbz	r0, 8000f6e <HAL_RCC_ClockConfig+0x22>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f4e:	4a5d      	ldr	r2, [pc, #372]	; (80010c4 <HAL_RCC_ClockConfig+0x178>)
 8000f50:	6813      	ldr	r3, [r2, #0]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d20b      	bcs.n	8000f72 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f5a:	6813      	ldr	r3, [r2, #0]
 8000f5c:	f023 0307 	bic.w	r3, r3, #7
 8000f60:	430b      	orrs	r3, r1
 8000f62:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f64:	6813      	ldr	r3, [r2, #0]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d001      	beq.n	8000f72 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8000f6e:	2001      	movs	r0, #1
}
 8000f70:	4770      	bx	lr
{
 8000f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f76:	6803      	ldr	r3, [r0, #0]
{
 8000f78:	b086      	sub	sp, #24
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f7a:	079d      	lsls	r5, r3, #30
 8000f7c:	d514      	bpl.n	8000fa8 <HAL_RCC_ClockConfig+0x5c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f7e:	075c      	lsls	r4, r3, #29
 8000f80:	d504      	bpl.n	8000f8c <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f82:	4c51      	ldr	r4, [pc, #324]	; (80010c8 <HAL_RCC_ClockConfig+0x17c>)
 8000f84:	6862      	ldr	r2, [r4, #4]
 8000f86:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8000f8a:	6062      	str	r2, [r4, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f8c:	071a      	lsls	r2, r3, #28
 8000f8e:	d504      	bpl.n	8000f9a <HAL_RCC_ClockConfig+0x4e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f90:	4c4d      	ldr	r4, [pc, #308]	; (80010c8 <HAL_RCC_ClockConfig+0x17c>)
 8000f92:	6862      	ldr	r2, [r4, #4]
 8000f94:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8000f98:	6062      	str	r2, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f9a:	4c4b      	ldr	r4, [pc, #300]	; (80010c8 <HAL_RCC_ClockConfig+0x17c>)
 8000f9c:	6885      	ldr	r5, [r0, #8]
 8000f9e:	6862      	ldr	r2, [r4, #4]
 8000fa0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000fa4:	432a      	orrs	r2, r5
 8000fa6:	6062      	str	r2, [r4, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fa8:	07db      	lsls	r3, r3, #31
 8000faa:	4604      	mov	r4, r0
 8000fac:	460d      	mov	r5, r1
 8000fae:	d520      	bpl.n	8000ff2 <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fb0:	6842      	ldr	r2, [r0, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb2:	4b45      	ldr	r3, [pc, #276]	; (80010c8 <HAL_RCC_ClockConfig+0x17c>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fb4:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb6:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fb8:	d06f      	beq.n	800109a <HAL_RCC_ClockConfig+0x14e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fba:	2a02      	cmp	r2, #2
 8000fbc:	d07e      	beq.n	80010bc <HAL_RCC_ClockConfig+0x170>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fbe:	0798      	lsls	r0, r3, #30
 8000fc0:	d527      	bpl.n	8001012 <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fc2:	4e41      	ldr	r6, [pc, #260]	; (80010c8 <HAL_RCC_ClockConfig+0x17c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fc4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fc8:	6873      	ldr	r3, [r6, #4]
 8000fca:	f023 0303 	bic.w	r3, r3, #3
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000fd2:	f7ff fc4d 	bl	8000870 <HAL_GetTick>
 8000fd6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fd8:	e004      	b.n	8000fe4 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fda:	f7ff fc49 	bl	8000870 <HAL_GetTick>
 8000fde:	1bc0      	subs	r0, r0, r7
 8000fe0:	4540      	cmp	r0, r8
 8000fe2:	d869      	bhi.n	80010b8 <HAL_RCC_ClockConfig+0x16c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fe4:	6873      	ldr	r3, [r6, #4]
 8000fe6:	6862      	ldr	r2, [r4, #4]
 8000fe8:	f003 030c 	and.w	r3, r3, #12
 8000fec:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000ff0:	d1f3      	bne.n	8000fda <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000ff2:	4a34      	ldr	r2, [pc, #208]	; (80010c4 <HAL_RCC_ClockConfig+0x178>)
 8000ff4:	6813      	ldr	r3, [r2, #0]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	42ab      	cmp	r3, r5
 8000ffc:	d90d      	bls.n	800101a <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ffe:	6813      	ldr	r3, [r2, #0]
 8001000:	f023 0307 	bic.w	r3, r3, #7
 8001004:	432b      	orrs	r3, r5
 8001006:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001008:	6813      	ldr	r3, [r2, #0]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	42ab      	cmp	r3, r5
 8001010:	d003      	beq.n	800101a <HAL_RCC_ClockConfig+0xce>
    return HAL_ERROR;
 8001012:	2001      	movs	r0, #1
}
 8001014:	b006      	add	sp, #24
 8001016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800101a:	6823      	ldr	r3, [r4, #0]
 800101c:	0759      	lsls	r1, r3, #29
 800101e:	d506      	bpl.n	800102e <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001020:	4929      	ldr	r1, [pc, #164]	; (80010c8 <HAL_RCC_ClockConfig+0x17c>)
 8001022:	68e0      	ldr	r0, [r4, #12]
 8001024:	684a      	ldr	r2, [r1, #4]
 8001026:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800102a:	4302      	orrs	r2, r0
 800102c:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800102e:	071a      	lsls	r2, r3, #28
 8001030:	d507      	bpl.n	8001042 <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001032:	4a25      	ldr	r2, [pc, #148]	; (80010c8 <HAL_RCC_ClockConfig+0x17c>)
 8001034:	6921      	ldr	r1, [r4, #16]
 8001036:	6853      	ldr	r3, [r2, #4]
 8001038:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800103c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001040:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001042:	f240 2201 	movw	r2, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001046:	4b21      	ldr	r3, [pc, #132]	; (80010cc <HAL_RCC_ClockConfig+0x180>)
 8001048:	ac06      	add	r4, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800104a:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800104e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001050:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8001054:	491c      	ldr	r1, [pc, #112]	; (80010c8 <HAL_RCC_ClockConfig+0x17c>)
 8001056:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001058:	f002 030c 	and.w	r3, r2, #12
 800105c:	2b08      	cmp	r3, #8
 800105e:	d11a      	bne.n	8001096 <HAL_RCC_ClockConfig+0x14a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001060:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8001064:	4423      	add	r3, r4
 8001066:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800106a:	03d3      	lsls	r3, r2, #15
 800106c:	d418      	bmi.n	80010a0 <HAL_RCC_ClockConfig+0x154>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800106e:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <HAL_RCC_ClockConfig+0x184>)
 8001070:	fb03 f300 	mul.w	r3, r3, r0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001074:	4a14      	ldr	r2, [pc, #80]	; (80010c8 <HAL_RCC_ClockConfig+0x17c>)
 8001076:	4817      	ldr	r0, [pc, #92]	; (80010d4 <HAL_RCC_ClockConfig+0x188>)
 8001078:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 800107a:	4917      	ldr	r1, [pc, #92]	; (80010d8 <HAL_RCC_ClockConfig+0x18c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800107c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001080:	5c80      	ldrb	r0, [r0, r2]
 8001082:	4a16      	ldr	r2, [pc, #88]	; (80010dc <HAL_RCC_ClockConfig+0x190>)
 8001084:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8001086:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001088:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 800108a:	f7ff fbaf 	bl	80007ec <HAL_InitTick>
  return HAL_OK;
 800108e:	2000      	movs	r0, #0
}
 8001090:	b006      	add	sp, #24
 8001092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSE_VALUE;
 8001096:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_RCC_ClockConfig+0x194>)
 8001098:	e7ec      	b.n	8001074 <HAL_RCC_ClockConfig+0x128>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109a:	039f      	lsls	r7, r3, #14
 800109c:	d491      	bmi.n	8000fc2 <HAL_RCC_ClockConfig+0x76>
 800109e:	e7b8      	b.n	8001012 <HAL_RCC_ClockConfig+0xc6>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010a0:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010a2:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <HAL_RCC_ClockConfig+0x194>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010a4:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010a8:	fb03 f300 	mul.w	r3, r3, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010ac:	4422      	add	r2, r4
 80010ae:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80010b6:	e7dd      	b.n	8001074 <HAL_RCC_ClockConfig+0x128>
        return HAL_TIMEOUT;
 80010b8:	2003      	movs	r0, #3
 80010ba:	e7ab      	b.n	8001014 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010bc:	019e      	lsls	r6, r3, #6
 80010be:	d480      	bmi.n	8000fc2 <HAL_RCC_ClockConfig+0x76>
 80010c0:	e7a7      	b.n	8001012 <HAL_RCC_ClockConfig+0xc6>
 80010c2:	bf00      	nop
 80010c4:	40022000 	.word	0x40022000
 80010c8:	40021000 	.word	0x40021000
 80010cc:	08001144 	.word	0x08001144
 80010d0:	003d0900 	.word	0x003d0900
 80010d4:	08001154 	.word	0x08001154
 80010d8:	20000018 	.word	0x20000018
 80010dc:	20000000 	.word	0x20000000
 80010e0:	007a1200 	.word	0x007a1200

080010e4 <__libc_init_array>:
 80010e4:	b570      	push	{r4, r5, r6, lr}
 80010e6:	2500      	movs	r5, #0
 80010e8:	4e0c      	ldr	r6, [pc, #48]	; (800111c <__libc_init_array+0x38>)
 80010ea:	4c0d      	ldr	r4, [pc, #52]	; (8001120 <__libc_init_array+0x3c>)
 80010ec:	1ba4      	subs	r4, r4, r6
 80010ee:	10a4      	asrs	r4, r4, #2
 80010f0:	42a5      	cmp	r5, r4
 80010f2:	d109      	bne.n	8001108 <__libc_init_array+0x24>
 80010f4:	f000 f81a 	bl	800112c <_init>
 80010f8:	2500      	movs	r5, #0
 80010fa:	4e0a      	ldr	r6, [pc, #40]	; (8001124 <__libc_init_array+0x40>)
 80010fc:	4c0a      	ldr	r4, [pc, #40]	; (8001128 <__libc_init_array+0x44>)
 80010fe:	1ba4      	subs	r4, r4, r6
 8001100:	10a4      	asrs	r4, r4, #2
 8001102:	42a5      	cmp	r5, r4
 8001104:	d105      	bne.n	8001112 <__libc_init_array+0x2e>
 8001106:	bd70      	pop	{r4, r5, r6, pc}
 8001108:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800110c:	4798      	blx	r3
 800110e:	3501      	adds	r5, #1
 8001110:	e7ee      	b.n	80010f0 <__libc_init_array+0xc>
 8001112:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001116:	4798      	blx	r3
 8001118:	3501      	adds	r5, #1
 800111a:	e7f2      	b.n	8001102 <__libc_init_array+0x1e>
 800111c:	08001164 	.word	0x08001164
 8001120:	08001164 	.word	0x08001164
 8001124:	08001164 	.word	0x08001164
 8001128:	08001168 	.word	0x08001168

0800112c <_init>:
 800112c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800112e:	bf00      	nop
 8001130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001132:	bc08      	pop	{r3}
 8001134:	469e      	mov	lr, r3
 8001136:	4770      	bx	lr

08001138 <_fini>:
 8001138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800113a:	bf00      	nop
 800113c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800113e:	bc08      	pop	{r3}
 8001140:	469e      	mov	lr, r3
 8001142:	4770      	bx	lr
